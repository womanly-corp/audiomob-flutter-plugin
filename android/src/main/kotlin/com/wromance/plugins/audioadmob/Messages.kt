// Copyright 2025 Womanly Corp. All rights reserved.
// Use of this source code is governed by a license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.wromance.plugins.audioadmob

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private fun deepEqualsMessages(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
      return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
      return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
      return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
      return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsMessages(a[it], b[it]) }
  }
  if (a is List<*> && b is List<*>) {
    return a.size == b.size &&
        a.indices.all{ deepEqualsMessages(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size && a.all {
        (b as Map<Any?, Any?>).containsKey(it.key) &&
        deepEqualsMessages(it.value, b[it.key])
    }
  }
  return a == b
}
    

/** Results of an audio ad request */
enum class AdRequestResult(val raw: Int) {
  /** The audio ad request completed as an audio ad is ready to play */
  FINISHED(0),
  /** There was no ad found for this user */
  NO_AD_AVAILABLE(1),
  /** The user has reached the maximum number of ads for this session */
  FREQUENCY_CAP_REACHED(2),
  /** The audio ad request failed due to an error */
  FAILED(3),
  /** The skippble ad was not requested as the device volume is not audible */
  SKIPPABLE_REQUEST_VOLUME_NOT_AUDIBLE(4),
  /** Unknown result */
  UNKNOWN(5);

  companion object {
    fun ofRaw(raw: Int): AdRequestResult? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AdPauseReason(val raw: Int) {
  /** The user has lowered the phone volume */
  PHONE_VOLUME_LOWERED(0),
  /** The user has called the pause method */
  PAUSE_METHOD_CALLED(1),
  /** The app is in the background */
  APP_IN_BACKGROUND(2);

  companion object {
    fun ofRaw(raw: Int): AdPauseReason? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Results of an audio ad playback */
enum class AdPlaybackResult(val raw: Int) {
  /** The audio ad playback has finished (the user can now be given a reward) */
  FINISHED(0),
  /** The audio ad was stopped by the 'stopAd' function */
  STOPPED(1),
  /** The audio ad playback failed due to an error */
  FAILED(2),
  /** The ad was canceled by the user before it started */
  CANCELED(3),
  /** The audio ad playback was skipped by the user */
  SKIPPED(4);

  companion object {
    fun ofRaw(raw: Int): AdPlaybackResult? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class Placement(val raw: Int) {
  REWARDED(0),
  SKIPPABLE(1);

  companion object {
    fun ofRaw(raw: Int): Placement? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class BannerSize(val raw: Int) {
  NO_BANNER(0),
  MEDIUM_RECTANGLE(1),
  MOBILE_LEADERBOARD(2);

  companion object {
    fun ofRaw(raw: Int): BannerSize? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Information about ad availability
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AdAvailability (
  /** An estimation of whether or not you will receive ads in this region */
  val adsAvailable: Boolean,
  /** Estimated revenue for an ad (if an impression is detected) */
  val estimatedRevenue: Double,
  /** Estimated Cost Per Thousand Impressions for an ad (if an impression is detected) */
  val estimatedCpm: Double,
  /** The ISO 3166 alpha-2 country code of the region the user is in */
  val geo: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AdAvailability {
      val adsAvailable = pigeonVar_list[0] as Boolean
      val estimatedRevenue = pigeonVar_list[1] as Double
      val estimatedCpm = pigeonVar_list[2] as Double
      val geo = pigeonVar_list[3] as String
      return AdAvailability(adsAvailable, estimatedRevenue, estimatedCpm, geo)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      adsAvailable,
      estimatedRevenue,
      estimatedCpm,
      geo,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AdAvailability) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsMessages(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * Information about an audio ad
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class AudioAd (
  /** The unique id of this audio ad */
  val id: String,
  /** Estimated Cost Per Thousand Impressions for this ad (if an impression is detected) */
  val estimatedCpm: Double,
  /** Estimated revenue for an ad (if an impression is detected) */
  val estimatedRevenue: Double,
  /** The duration of the ad */
  val durationInSeconds: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AudioAd {
      val id = pigeonVar_list[0] as String
      val estimatedCpm = pigeonVar_list[1] as Double
      val estimatedRevenue = pigeonVar_list[2] as Double
      val durationInSeconds = pigeonVar_list[3] as Long
      return AudioAd(id, estimatedCpm, estimatedRevenue, durationInSeconds)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      estimatedCpm,
      estimatedRevenue,
      durationInSeconds,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AudioAd) {
      return false
    }
    if (this === other) {
      return true
    }
    return deepEqualsMessages(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AdRequestResult.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AdPauseReason.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          AdPlaybackResult.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          Placement.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          BannerSize.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AdAvailability.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AudioAd.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is AdRequestResult -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is AdPauseReason -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is AdPlaybackResult -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is Placement -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is BannerSize -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is AdAvailability -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is AudioAd -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * Flutter API Interface for Audiomob callbacks
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
class AudiomobObserverApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by AudiomobObserverApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
  }
  /** The audio ad request has started */
  fun onAdRequestStarted(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdRequestStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** The audio ad request completed as an audio ad is ready to play */
  fun onAdRequestCompleted(adRequestResultArg: AdRequestResult, resultArg: AudioAd?, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdRequestCompleted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(adRequestResultArg, resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** The audio ad playback has started */
  fun onAdPlaybackStarted(resultArg: AudioAd, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdPlaybackStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** The audio ad playback has finished (the user can now be given a reward) */
  fun onAdPlaybackCompleted(adPlaybackResultArg: AdPlaybackResult, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdPlaybackCompleted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(adPlaybackResultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** The audio ad playback is paused */
  fun onAdPlaybackPaused(adPauseReasonArg: AdPauseReason, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdPlaybackPaused$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(adPauseReasonArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** Audio ad playback is resumed */
  fun onAdPlaybackResumed(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdPlaybackResumed$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  /** The ad availability request completed and has Ad Availability object */
  fun onAdAvailabilityRetrieved(resultArg: AdAvailability, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.audioadmob.AudiomobObserverApi.onAdAvailabilityRetrieved$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(resultArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/**
 * Host API Interface for Audiomob
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface AudiomobHostApi {
  /** Initializes the Audiomob Android SDK */
  fun initialize(apiKey: String, bundleId: String, backgroundModeEnabled: Boolean)
  /** Requests a background audio ad and begins the ad playback as soon as it's ready */
  fun requestAndPlayAd()
  /** Pauses the SDK's lifecycle, call this method when the app goes into the background (non-background ads only) */
  fun pauseLifeCycle()
  /** Resumes the SDK's lifecycle, call this method when the app comes into the foreground (non-background ads only) */
  fun resumeLifeCycle()
  /** Releases resources used by Audiomob, ensure to call this function when the context is destroyed */
  fun release()
  /** Starts the asynchronous call to get the AdAvailability information */
  fun getAdAvailability(placement: Placement)
  /** Pauses the playing audio ad */
  fun pauseAd()
  /** Resumes the paused audio ad */
  fun resumePausedAd()
  /** Stops the audio ad playback */
  fun stopAd()
  /** Returns true if the ad playback is in progress */
  fun hasAdBegunPlaying(): Boolean
  /** Return true if the ad is paused */
  fun isAdPaused(): Boolean
  /** Returns the seconds remaining for the ad that is currently playing */
  fun getTimeRemaining(): Double
  /** If set as true, the server will return test ads even if live ads are enabled on the dashboard */
  fun setForceTestAds(enabled: Boolean)
  /** If set as true, and user has given the permission, SDK will fetch latitude and longitude and send in ad request */
  fun setSendGeoLocation(enabled: Boolean)
  /** Sets whether or not to send the user's Android Advertising Id with the ad request if it's available */
  fun setSendAdvertisingId(enabled: Boolean)
  /** Sets whether or not to send the Android ID as a fallback ID if the Android Advertising Id is not available */
  fun setSendAndroidIdAsAFallback(enabled: Boolean)
  /** Sets whether or not to not send any device ID in the ad request if the Android Advertising Id is not available */
  fun setDoNotSendAnyDeviceIdsForNonConsentedUsers(enabled: Boolean)
  /** Sets whether or not to send consent strings set by a Consent Management Platform or in SharedPreferences */
  fun setSendConsentStrings(enabled: Boolean)
  /** Sets whether or not to only send contextual signals in the ad request */
  fun setOnlySendContextualSignals(enabled: Boolean)

  companion object {
    /** The codec used by AudiomobHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `AudiomobHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: AudiomobHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val apiKeyArg = args[0] as String
            val bundleIdArg = args[1] as String
            val backgroundModeEnabledArg = args[2] as Boolean
            val wrapped: List<Any?> = try {
              api.initialize(apiKeyArg, bundleIdArg, backgroundModeEnabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.requestAndPlayAd$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.requestAndPlayAd()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.pauseLifeCycle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.pauseLifeCycle()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.resumeLifeCycle$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.resumeLifeCycle()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.release$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.release()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.getAdAvailability$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val placementArg = args[0] as Placement
            val wrapped: List<Any?> = try {
              api.getAdAvailability(placementArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.pauseAd$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.pauseAd()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.resumePausedAd$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.resumePausedAd()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.stopAd$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.stopAd()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.hasAdBegunPlaying$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.hasAdBegunPlaying())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.isAdPaused$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isAdPaused())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.getTimeRemaining$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getTimeRemaining())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setForceTestAds$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setForceTestAds(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setSendGeoLocation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setSendGeoLocation(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setSendAdvertisingId$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setSendAdvertisingId(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setSendAndroidIdAsAFallback$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setSendAndroidIdAsAFallback(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setDoNotSendAnyDeviceIdsForNonConsentedUsers$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setDoNotSendAnyDeviceIdsForNonConsentedUsers(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setSendConsentStrings$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setSendConsentStrings(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.audioadmob.AudiomobHostApi.setOnlySendContextualSignals$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.setOnlySendContextualSignals(enabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
